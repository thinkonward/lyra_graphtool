Search.setIndex({"docnames": ["depend", "examples/00_lyra_graphtool_tutorial", "index", "install", "lyra_graphtool", "modules", "tutorial"], "filenames": ["depend.rst", "examples/00_lyra_graphtool_tutorial.ipynb", "index.rst", "install.rst", "lyra_graphtool.rst", "modules.rst", "tutorial.rst"], "titles": ["Package Dependencies", "<strong>Lyra Graphtool Tutorial</strong>", "Welcome to Lyra Graphtool\u2019s documentation!", "Installation", "lyra_graphtool", "API Documentation", "Tutorial"], "terms": {"python": 0, "3": [0, 4], "10": [0, 1], "9": [0, 1], "json": [0, 4], "pickl": [0, 4], "copi": [0, 1, 4], "type": [0, 4], "numpi": [0, 4], "process": 1, "send": 1, "configuration_single_tim": 1, "config_single_tim": [1, 3, 4], "summari": 1, "sire": 1, "string": 1, "log": 1, "detail": 1, "current": 1, "get_schedule_path_length": 1, "e": 1, "been": [1, 4], "proper": 1, "cost_rat": [1, 4], "onc": [1, 4], "doesn": 1, "t": [1, 4], "more": [1, 4], "chang": 1, "base": [1, 4], "both": 1, "graph_typ": [1, 3, 4], "coordniat": 1, "deepcopi": [1, 4], "randint": 1, "pprint": 1, "pp": 1, "modulenotfounderror": 1, "traceback": 1, "recent": 1, "last": 1, "line": [1, 3, 4], "6": [1, 4], "4": [1, 4], "7": 1, "No": 1, "name": 1, "parg": 1, "arguments_fil": [1, 4], "ready_setup": 1, "args_random": 1, "graph_fil": [1, 4], "graph_random": 1, "param": [1, 4], "args_trial": 1, "duration_tim": [1, 4], "worker_cost_r": [1, 4], "cfg": 1, "solution_random": 1, "50": 1, "str": [1, 4], "int": [1, 4], "arg_list_new": 1, "trial_nam": 1, "trial1": 1, "trial": 1, "10000": 1, "hire": [1, 4], "worker1_cost": 1, "200": 1, "reduc": 1, "worker2_cost": 1, "400": 1, "worker3_cost": 1, "600": 1, "filename_graph": 1, "max_x": [1, 4], "max_i": [1, 4], "num_vert": 1, "num_sit": 1, "k": 1, "ignor": 1, "max": 1, "grid": [1, 4], "creation": 1, "30": 1, "between": 1, "shown": 1, "num_site1": 1, "cannot": [1, 4], "greater": 1, "num_site2": 1, "num_site3": 1, "site1_acquire_tim": 1, "arg": [1, 4], "specifi": [1, 4], "impos": 1, "site2_acquire_tim": 1, "site3_acquire_tim": 1, "site1_reward": 1, "100": [1, 4], "site2_reward": 1, "site3_reward": 1, "300": 1, "new_parg": 1, "f": 1, "args_": 1, "new_pargs_from_load": 1, "args_args_trial1": 1, "graph_trial1": 1, "figur": 1, "out": 1, "new_pargs_list": 1, "0": [1, 4], "site1_mult_tim": 1, "site2_mult_tim": 1, "site3_mult_tim": 1, "site1_mult_time_act": 1, "site2_mult_time_act": 1, "site3_mult_time_act": 1, "site1_mult_work": 1, "site2_mult_work": 1, "site3_mult_work": 1, "site1_exp_tim": 1, "site2_exp_tim": 1, "site3_exp_tim": 1, "back": 1, "1000": 1, "20": 1, "0x11842faf0": 1, "500": 1, "schedule_add": 1, "sched": [1, 4], "0x11f3a9b40": 1, "0x11f262d40": 1, "0x11f262da0": 1, "0x11f262e00": 1, "0x11f262e60": 1, "0x11f262ec0": 1, "0x11f262f20": 1, "0x11f262f80": 1, "8": 1, "0x11f262fe0": 1, "0x11f263040": 1, "0x11f2630a0": 1, "11": 1, "0x11f263100": 1, "12": 1, "0x11f263160": 1, "13": 1, "0x11f2631c0": 1, "14": 1, "0x11f263220": 1, "15": 1, "0x11f263280": 1, "16": 1, "0x11f2632e0": 1, "17": 1, "0x11f263340": 1, "18": 1, "0x11f2633a0": 1, "19": 1, "0x11f263400": 1, "true": [1, 4], "900": 1, "n": 1, "2200": 1, "0x11fbee0b0": 1, "0x12fcb9e10": 1, "file_nam": [1, 4], "test_config_sav": 1, "none": [1, 4], "vtype": 1, "acc": 1, "fals": [1, 4], "v_orig": 1, "v": [1, 4], "vert": 1, "v1": [1, 4], "v2": [1, 4], "edge_obj": 1, "0x1285a21d0": 1, "after": [1, 4], "translat": 1, "reduct": 1, "compon": 1, "0x10b57b670": 1, "0x10b57b610": 1, "0x10bc1c400": 1, "0x10bc1c520": 1, "0x10bc1c5e0": 1, "closest_verts_list": 1, "0x11f7efd60": 1, "0x11f7efdf0": 1, "0x11f7eea40": 1, "0x11f7ee950": 1, "0x10bc1c430": 1, "0x10bc1c3d0": 1, "0x10bc1c370": 1, "0x10bc1c490": 1, "0x10b57bc40": 1, "0x10bc1c3a0": 1, "0x10bc1c460": 1, "0x10bc1c5b0": 1, "0x10bc1c610": 1, "0x10bc1c640": 1, "0x10bc1c670": 1, "0x10bc1c550": 1, "0x10bd45e10": 1, "0x10bc1c4f0": 1, "0x10bc1c7f0": 1, "0x10bc1c820": 1, "0x10bc1c580": 1, "0x10bc1c4c0": 1, "0x10bc1c7c0": 1, "0x10bc1c760": 1, "0x10bc1c6a0": 1, "0x10bc1c700": 1, "0x10bc1c790": 1, "0x10bc1c850": 1, "0x10bc1c730": 1, "0x10bc1c6d0": 1, "vert_edg": 1, "0x11771aa70": 1, "0x11771ad10": 1, "0x11771ae30": 1, "0x11771aef0": 1, "edge_list": [1, 4], "specified_vert": 1, "site1_vert_list": 1, "v_type": [1, 4], "isolated_verts_list": 1, "0x11f7ee800": 1, "graph_sampl": 1, "them": 1, "pick": 1, "first": 1, "paths12": 1, "p": 1, "append": 1, "highlight": 1, "orang": 1, "test_graph_sav": 1, "graph_": 1, "0x11771a950": 1, "0x11771a9b0": 1, "0x11771aa10": 1, "0x11771ab30": 1, "0x11771aad0": 1, "0x11771abf0": 1, "0x11771ab90": 1, "0x11771acb0": 1, "0x11771ad70": 1, "0x11771ac50": 1, "0x11771add0": 1, "0x11771ae90": 1, "0x11771af50": 1, "0x11771b010": 1, "0x11771b070": 1, "0x11771afb0": 1, "0x11771b130": 1, "0x11771b0d0": 1, "0x11771b190": 1, "0x11771b250": 1, "0x11771b1f0": 1, "0x11771b310": 1, "0x11771b2b0": 1, "0x11771b3d0": 1, "0x11771b370": 1, "0x11771b430": 1, "0x11771b490": 1, "0x11771b4f0": 1, "0x11771b550": 1, "0x11771b610": 1, "0x11771b5b0": 1, "0x11771b6d0": 1, "0x11771b730": 1, "0x11771b670": 1, "0x11771b7f0": 1, "0x11771b790": 1, "0x117833a00": 1, "n_site1": [1, 4], "n_site2": [1, 4], "n_site3": [1, 4], "set_vert": 1, "input_vertex": 1, "new_vertex": 1, "vert_arrai": 1, "defined_verts_list": 1, "vert_list": [1, 4], "all_verts_list": 1, "come": 1, "wrker_obj": 1, "w_type": [1, 4], "typeerror": 1, "33": 1, "python_project": 1, "py": 1, "32": 1, "__init__": 1, "self": 1, "27": 1, "28": 1, "29": 1, "31": 1, "subscript": 1, "instal": 2, "packag": [2, 3], "depend": [2, 4], "api": 2, "lyra_graphtool": [2, 3, 5], "tutori": 2, "index": [2, 6], "modul": [2, 5], "search": 2, "page": 2, "To": 3, "clone": 3, "repositori": 3, "your": 3, "project": 3, "folder": 3, "run": 3, "follow": [3, 4], "code": [3, 4], "import": [3, 4], "lgtool": 3, "from": [3, 4], "configur": [3, 5, 6], "edg": [3, 5, 6], "graph": [3, 5, 6], "paramet": [3, 5, 6], "vertex": [3, 5, 6], "worker_typ": [3, 4, 6], "vertex_typ": [3, 4, 6], "class": 4, "option": 4, "access": 4, "bool": 4, "sourc": 4, "gener": 4, "info": 4, "verbos": 4, "list": 4, "displai": 4, "inform": 4, "about": 4, "object": [4, 6], "argument": 4, "default": 4, "return": 4, "add_sch": 4, "wt": 4, "wn": 4, "dict": 4, "add": 4, "schedul": 4, "number": 4, "budget_feas": 4, "method": 4, "determin": 4, "budget": 4, "i": 4, "feasibl": 4, "If": 4, "cost": 4, "els": 4, "Not": 4, "otherwis": 4, "float": 4, "calcul": 4, "entir": 4, "note": 4, "us": 4, "each": 4, "valu": 4, "static": 4, "cost_sch": 4, "singl": 4, "kei": 4, "time": 4, "test": 4, "overal": 4, "feasibili": 4, "sched_all_feasibility_spac": 4, "sched_all_feasible_access_sit": 4, "all": 4, "function": 4, "ar": 4, "get_accessed_sit": 4, "tupl": 4, "site": 4, "access_count": 4, "1": 4, "mean": 4, "appear": 4, "time_to_acquir": 4, "adjac": 4, "x": 4, "y": 4, "get_current_work": 4, "config": 4, "get_max_revenu": 4, "maximum": 4, "revenu": 4, "max_revenu": 4, "amount_of_sit": 4, "single_reward": 4, "get_sched_path_length": 4, "length": 4, "one": 4, "how": 4, "mani": 4, "timestep": 4, "wa": 4, "activ": 4, "get_vertices_start": 4, "get": [4, 6], "vertic": 4, "which": 4, "": [4, 6], "path": [4, 6], "must": 4, "start": [4, 6], "thi": 4, "allow": 4, "should": 4, "avoid": 4, "hard": 4, "constraint": 4, "outsid": 4, "ie": 4, "solver": 4, "get_work": 4, "ha": 4, "rate": 4, "compliant": 4, "is_empti": 4, "scedul": 4, "empti": 4, "load_from_json": 4, "load": 4, "dictionari": 4, "format": 4, "filenam": 4, "filepath": 4, "sched_feasible_access_sit": 4, "befor": 4, "call": 4, "save": 4, "file": 4, "save_to_json": 4, "properti": 4, "criteria": 4, "onli": 4, "can": 4, "specif": 4, "point": 4, "longer": 4, "subsequ": 4, "sched_all_feasible_spac": 4, "origin_flag": 4, "spatial": 4, "extract": 4, "non": 4, "basic": 4, "origin": 4, "have": 4, "days_to_acquir": 4, "expir": 4, "than": 4, "sequenc": 4, "sched_feasible_spac": 4, "end": 4, "again": 4, "later": 4, "restart": 4, "ani": 4, "sched_info": 4, "given": 4, "sched_revenu": 4, "site_access": 4, "being": 4, "site_accessed_at_tim": 4, "step": 4, "in_graph": 4, "travel": 4, "across": 4, "do": 4, "nearest_neighbor": 4, "defin": 4, "nearest": 4, "neighbor": 4, "consist": 4, "num_vertic": 4, "site_structur": 4, "gr_type": 4, "random": 4, "int_pair": 4, "add_vertex": 4, "adjacent_vertic": 4, "closest_vertic": 4, "connected_compon": 4, "depth_first_search": 4, "visit": 4, "distanc": 4, "vert_list_1": 4, "vert_list_2": 4, "edges_info": 4, "get_edges_at_vertex": 4, "get_vertex_xi": 4, "coordin": 4, "get_vertices_typ": 4, "isolated_vertic": 4, "make_graph_connect": 4, "max_len": 4, "inf": 4, "print_graph": 4, "filename_out": 4, "remove_vertex": 4, "set_edg": 4, "set_random_sites_origin": 4, "set_vertex_coord": 4, "set": 4, "set_vertex_typ": 4, "vertices_arrai": 4, "ndarrai": 4, "arrai": 4, "x0": 4, "y0": 4, "x1": 4, "y1": 4, "np": 4, "vertices_info": 4, "pass": 4, "reciev": 4, "intenum": 4, "an": 4, "enumer": 4, "5000": 4, "worker1": 4, "worker2": 4, "worker3": 4, "processarg": [4, 6], "args_list": 4, "classmethod": 4, "load_graph": 4, "sitestructur": 4, "verbost": 4, "values_to_arg": 4, "need": 4, "input": 4, "process_arg": 4, "argpars": 4, "argumentpars": 4, "variabl": 4, "arg_list": 4, "command": 4, "style": 4, "use_arg_default": 4, "bostr": 4, "checkd3": 4, "type_list": 4, "checkf": 4, "99": 4, "checki": 4, "checkp2": 4, "comma_separated_float_3": 4, "comma_separated_int_2": 4, "grstr": 4, "nnfloat": 4, "nnint": 4, "ostr": 4, "pint": 4, "sstr": 4, "reward": 4, "mult_tim": 4, "mult_time_act": 4, "mult_work": 4, "expiration_tim": 4, "accessible_typ": 4, "locat": 4, "space": 4, "neither": 4, "nor": 4, "other": 4, "5": 4, "other2": 4, "site1": 4, "2": 4, "site2": 4, "site3": 4, "util": 5, "worker": [5, 6], "lyra": 6, "graphtool": 6, "welcom": 6, "off": 6, "beaten": 6, "xeek": 6, "challeng": 6, "main": 6, "initi": 6, "setup": 6, "now": 6, "let": 6}, "objects": {"lyra_graphtool": [[4, 0, 0, "-", "configuration"], [4, 0, 0, "-", "edge"], [4, 0, 0, "-", "graph"], [4, 0, 0, "-", "parameters"], [4, 0, 0, "-", "utils"], [4, 0, 0, "-", "vertex"], [4, 0, 0, "-", "worker"]], "lyra_graphtool.configuration": [[4, 1, 1, "", "Config_Single_Time"], [4, 1, 1, "", "Configuration"]], "lyra_graphtool.configuration.Config_Single_Time": [[4, 2, 1, "", "info"]], "lyra_graphtool.configuration.Configuration": [[4, 2, 1, "", "add_sched"], [4, 2, 1, "", "budget_feasible"], [4, 2, 1, "", "cost"], [4, 2, 1, "", "cost_sched"], [4, 2, 1, "", "feasible"], [4, 2, 1, "", "get_accessed_sites"], [4, 2, 1, "", "get_current_workers"], [4, 2, 1, "", "get_max_revenue"], [4, 2, 1, "", "get_sched_path_length"], [4, 2, 1, "", "get_vertices_start"], [4, 2, 1, "", "get_worker"], [4, 2, 1, "", "is_empty"], [4, 2, 1, "", "load_from_json"], [4, 2, 1, "", "revenue"], [4, 2, 1, "", "save"], [4, 2, 1, "", "save_to_json"], [4, 2, 1, "", "sched_all_feasible_access_sites"], [4, 2, 1, "", "sched_all_feasible_space"], [4, 2, 1, "", "sched_feasible_access_sites"], [4, 2, 1, "", "sched_feasible_space"], [4, 2, 1, "", "sched_info"], [4, 2, 1, "", "sched_revenue"], [4, 2, 1, "", "site_accessed"], [4, 2, 1, "", "site_accessed_at_time"]], "lyra_graphtool.edge": [[4, 1, 1, "", "Edge"]], "lyra_graphtool.edge.Edge": [[4, 2, 1, "", "in_graph"], [4, 2, 1, "", "info"], [4, 2, 1, "", "nearest_neighbor"]], "lyra_graphtool.graph": [[4, 1, 1, "", "Graph"], [4, 1, 1, "", "Graph_Type"]], "lyra_graphtool.graph.Graph": [[4, 2, 1, "", "add_vertex"], [4, 2, 1, "", "adjacent_vertices"], [4, 2, 1, "", "closest_vertices"], [4, 2, 1, "", "connected_components"], [4, 2, 1, "", "depth_first_search"], [4, 2, 1, "", "distance"], [4, 2, 1, "", "edges_info"], [4, 2, 1, "", "get_edges_at_vertex"], [4, 2, 1, "", "get_vertex_xy"], [4, 2, 1, "", "get_vertices_type"], [4, 2, 1, "", "isolated_vertices"], [4, 2, 1, "", "load_from_json"], [4, 2, 1, "", "make_graph_connected"], [4, 2, 1, "", "paths"], [4, 2, 1, "", "print_graph"], [4, 2, 1, "", "remove_vertex"], [4, 2, 1, "", "save"], [4, 2, 1, "", "save_to_json"], [4, 2, 1, "", "set_edges"], [4, 2, 1, "", "set_random_sites_origin"], [4, 2, 1, "", "set_vertex_coords"], [4, 2, 1, "", "set_vertex_type"], [4, 2, 1, "", "vertices_array"], [4, 2, 1, "", "vertices_info"]], "lyra_graphtool.graph.Graph_Type": [[4, 3, 1, "", "GRID"], [4, 3, 1, "", "RANDOM"]], "lyra_graphtool.parameters": [[4, 1, 1, "", "Parameters"], [4, 1, 1, "", "ProcessArgs"], [4, 1, 1, "", "Site_Structures"]], "lyra_graphtool.parameters.Parameters": [[4, 2, 1, "", "display"]], "lyra_graphtool.parameters.ProcessArgs": [[4, 2, 1, "", "load"], [4, 2, 1, "", "load_graph"], [4, 2, 1, "", "save"], [4, 2, 1, "", "values_to_args"]], "lyra_graphtool.parameters.Site_Structures": [[4, 2, 1, "", "values_to_args"]], "lyra_graphtool.utils": [[4, 4, 1, "", "bostr"], [4, 4, 1, "", "checkd3"], [4, 4, 1, "", "checkf"], [4, 4, 1, "", "checki"], [4, 4, 1, "", "checkp2"], [4, 4, 1, "", "comma_separated_float_3"], [4, 4, 1, "", "comma_separated_int_2"], [4, 4, 1, "", "grstr"], [4, 4, 1, "", "nnfloat"], [4, 4, 1, "", "nnint"], [4, 4, 1, "", "ostr"], [4, 4, 1, "", "pint"], [4, 4, 1, "", "sstr"], [4, 4, 1, "", "vertices_array"]], "lyra_graphtool.vertex": [[4, 1, 1, "", "Vertex"], [4, 1, 1, "", "Vertex_Type"]], "lyra_graphtool.vertex.Vertex": [[4, 2, 1, "", "accessible_types"], [4, 2, 1, "", "info"]], "lyra_graphtool.vertex.Vertex_Type": [[4, 3, 1, "", "BASIC"], [4, 3, 1, "", "ORIGIN"], [4, 3, 1, "", "OTHER"], [4, 3, 1, "", "OTHER2"], [4, 3, 1, "", "SITE1"], [4, 3, 1, "", "SITE2"], [4, 3, 1, "", "SITE3"]], "lyra_graphtool.worker": [[4, 1, 1, "", "Worker"], [4, 1, 1, "", "Worker_Type"]], "lyra_graphtool.worker.Worker": [[4, 2, 1, "", "access"]], "lyra_graphtool.worker.Worker_Type": [[4, 3, 1, "", "WORKER1"], [4, 3, 1, "", "WORKER2"], [4, 3, 1, "", "WORKER3"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"]}, "titleterms": {"packag": 0, "depend": 0, "lyra": [1, 2], "graphtool": [1, 2], "tutori": [1, 6], "welcom": [1, 2], "off": 1, "beaten": 1, "path": 1, "xeek": 1, "challeng": 1, "thi": 1, "i": 1, "fun": 1, "uniqu": 1, "variat": 1, "tradit": 1, "travel": 1, "salesman": 1, "problem": 1, "In": 1, "goal": 1, "optim": 1, "rout": 1, "ha": 1, "walk": 1, "introduc": 1, "addit": 1, "constraint": 1, "degre": 1, "freedom": 1, "variabl": 1, "Not": 1, "onli": 1, "you": 1, "consid": 1, "distanc": 1, "factor": 1, "like": 1, "simul": 1, "durat": 1, "budget": 1, "amount": 1, "reward": 1, "extract": 1, "from": 1, "particular": 1, "site": 1, "cost": 1, "worker": [1, 4], "The": 1, "solut": 1, "plan": 1, "also": 1, "an": 1, "algorithm": 1, "test": 1, "other": 1, "setup": 1, "differ": 1, "graph": [1, 4], "explor": 1, "valu": 1, "therefor": 1, "have": 1, "keep": 1, "mind": 1, "ar": 1, "develop": 1, "univers": 1, "tool": 1, "find": 1, "team": 1, "built": 1, "power": 1, "call": 1, "lyra_graphtool": [1, 4], "help": 1, "skip": 1, "part": 1, "get": 1, "import": 1, "gener": 1, "notebook": 1, "well": 1, "random": 1, "exmapl": 1, "api": [1, 5], "document": [1, 2, 5], "serv": 1, "your": 1, "documen": 1, "learn": 1, "resourc": 1, "pleas": 1, "us": 1, "link": 1, "below": 1, "would": 1, "jump": 1, "specif": 1, "object": 1, "starter": 1, "exampl": 1, "u": 1, "main": 1, "index": 1, "paramet": [1, 4], "modul": [1, 4], "configur": [1, 4], "edg": [1, 4], "vertex": [1, 4], "initi": 1, "upon": 1, "start": 1, "competitor": 1, "need": 1, "download": 1, "requir": 1, "matrial": 1, "page": 1, "provid": 1, "argument": 1, "file": 1, "contain": 1, "inform": 1, "set": 1, "up": 1, "all": 1, "particip": 1, "reciev": 1, "same": 1, "total": 1, "A": 1, "json": 1, "load": 1, "vertic": 1, "similar": 1, "without": 1, "playground": 1, "write": 1, "solv": 1, "note": 1, "ensur": 1, "folder": 1, "save": 1, "project": 1, "avoid": 1, "issu": 1, "now": 1, "let": 1, "": [1, 2], "run": 1, "next": 1, "3": 1, "code": 1, "cell": 1, "order": 1, "doubl": 1, "check": 1, "make": 1, "sure": 1, "lgtool": 1, "processarg": 1, "correct": 1, "intial": 1, "do": 1, "howev": 1, "creat": 1, "own": 1, "rememb": 1, "final": 1, "score": 1, "occur": 1, "than": 1, "what": 1, "so": 1, "advantag": 1, "see": 1, "effieci": 1, "scenario": 1, "function": 1, "proceesarg": 1, "build": 1, "pass": 1, "new": 1, "through": 1, "futur": 1, "load_graph": 1, "filenam": 1, "site_structur": 1, "values_to_arg": 1, "return": 1, "list": 1, "compar": 1, "wa": 1, "top": 1, "can": 1, "wrap": 1, "class": 1, "which": 1, "further": 1, "displai": 1, "view": 1, "were": 1, "Or": 1, "each": 1, "individu": 1, "rate": 1, "section": 1, "workhors": 1, "becaus": 1, "allow": 1, "user": 1, "add": 1, "updat": 1, "most": 1, "add_sch": 1, "schedul": 1, "worker_typ": 1, "wt": 1, "number": 1, "those": 1, "wn": 1, "To": 1, "access": 1, "dictionari": 1, "config": 1, "format": 1, "we": 1, "defin": 1, "want": 1, "worker1": 1, "1": 1, "budget_feas": 1, "here": 1, "whether": 1, "entir": 1, "stai": 1, "within": 1, "contraint": 1, "input": 1, "arug": 1, "profit": 1, "revenu": 1, "its": 1, "increas": 1, "It": 1, "cost_sch": 1, "calcul": 1, "singl": 1, "feasibl": 1, "method": 1, "determin": 1, "overal": 1, "term": 1, "space": 1, "buget": 1, "get_accessed_sit": 1, "get_current_work": 1, "full": 1, "get_max_revenu": 1, "maximum": 1, "earn": 1, "get_sched_path_length": 1, "length": 1, "one": 1, "how": 1, "mani": 1, "step": 1, "activ": 1, "get_vertices_start": 1, "must": 1, "get_work": 1, "compliant": 1, "is_empti": 1, "empti": 1, "load_from_json": 1, "pickl": 1, "save_to_json": 1, "sched_all_feasible_access_sit": 1, "properti": 1, "sched_all_feasible_spac": 1, "spatial": 1, "sched_feasible_access_sit": 1, "sched_feasible_spac": 1, "whole": 1, "sched_info": 1, "print": 1, "about": 1, "form": 1, "timestep": 1, "x_coordin": 1, "y_coordin": 1, "vertex_typ": 1, "sched_revenu": 1, "site_access": 1, "reuqir": 1, "site_accessed_at_tim": 1, "given": 1, "time": 1, "5": 1, "info": 1, "in_graph": 1, "nearest_neighbor": 1, "two": 1, "thei": 1, "add_vertex": 1, "manual": 1, "adjacent_vertic": 1, "adjac": 1, "closest_vertic": 1, "closet": 1, "connected_compon": 1, "connect": 1, "depth_first_search": 1, "get_edges_at_vertex": 1, "our": 1, "get_vertex_xi": 1, "coordin": 1, "x": 1, "2": 1, "y": 1, "edges_info": 1, "get_vertices_typ": 1, "isolated_vertic": 1, "ani": 1, "isol": 1, "make_graph_connect": 1, "anoth": 1, "when": 1, "ever": 1, "possibl": 1, "point": 1, "print_graph": 1, "dure": 1, "visual": 1, "later": 1, "set_edg": 1, "unclear": 1, "doe": 1, "set_random_sites_origin": 1, "set_vertex_typ": 1, "set_vertex_coord": 1, "vertices_arrai": 1, "numpi": 1, "arrai": 1, "vertices_info": 1, "By": 1, "either": 1, "site3": 1, "store": 1, "locat": 1, "type": 1, "These": 1, "vari": 1, "basic": 1, "neither": 1, "nor": 1, "origin": 1, "regular": 1, "other2": 1, "site1": 1, "site2": 1, "characterist": 1, "avail": 1, "expir": 1, "aquir": 1, "assign": 1, "attribut": 1, "just": 1, "along": 1, "accessible_typ": 1, "hold": 1, "three": 1, "worker2": 1, "worker3": 1, "ocject": 1, "abov": 1, "associ": 1, "indic": 2, "tabl": 2, "instal": 3, "util": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"Package Dependencies": [[0, "package-dependencies"]], "Lyra Graphtool Tutorial": [[1, "lyra-graphtool-tutorial"]], "Welcome to the Off the Beaten Path Xeek Challenge!": [[1, "welcome-to-the-off-the-beaten-path-xeek-challenge"]], "This is a fun and unique variation of the traditional travelling salesman problem.": [[1, "this-is-a-fun-and-unique-variation-of-the-traditional-travelling-salesman-problem"]], "In the traditional travelling salesman problem, the goal is to optimize the route that the \u201csalesman\u201d has to walk. This challenge introduces additional constraints and additional degrees of freedom (variables) to the problem. Not only will you be considering the distance to travel, but additional factors like simulation duration, budget, amount of rewards extracted from a particular site, and the cost of a worker. The solution to the challenge is not only the plan, but also an algorithm that will be tested on other problem setups (different graphs to explore, different values of constraints), therefore you have to keep in mind, that you are developing a universal tool for finding a solution.": [[1, "in-the-traditional-travelling-salesman-problem-the-goal-is-to-optimize-the-route-that-the-salesman-has-to-walk-this-challenge-introduces-additional-constraints-and-additional-degrees-of-freedom-variables-to-the-problem-not-only-will-you-be-considering-the-distance-to-travel-but-additional-factors-like-simulation-duration-budget-amount-of-rewards-extracted-from-a-particular-site-and-the-cost-of-a-worker-the-solution-to-the-challenge-is-not-only-the-plan-but-also-an-algorithm-that-will-be-tested-on-other-problem-setups-different-graphs-to-explore-different-values-of-constraints-therefore-you-have-to-keep-in-mind-that-you-are-developing-a-universal-tool-for-finding-a-solution"]], "The Xeek team has built a unique and powerful tool, called lyra_graphtool, to help you skip the graph setup part of the challenge and get to the important part; generating an algorithm to optimize the problem! This notebook, as well as a random walk exmaple solution and API Documentation will serve as your documenation and learning resources for the challenge.": [[1, "the-xeek-team-has-built-a-unique-and-powerful-tool-called-lyra-graphtool-to-help-you-skip-the-graph-setup-part-of-the-challenge-and-get-to-the-important-part-generating-an-algorithm-to-optimize-the-problem-this-notebook-as-well-as-a-random-walk-exmaple-solution-and-api-documentation-will-serve-as-your-documenation-and-learning-resources-for-the-challenge"]], "Please use the links below if you would like to jump to a specific Object in this notebook, as well as a starter notebook with an example solution!": [[1, "please-use-the-links-below-if-you-would-like-to-jump-to-a-specific-object-in-this-notebook-as-well-as-a-starter-notebook-with-an-example-solution"]], "<u>Main Index</u>": [[1, "u-main-index-u"]], "<u>Parameters Module</u>": [[1, "u-parameters-module-u"]], "<u>Configuration Module</u>": [[1, "u-configuration-module-u"]], "<u>Edge Module</u>": [[1, "u-edge-module-u"]], "<u>Graph Module</u>": [[1, "u-graph-module-u"]], "<u>Vertex Module</u>": [[1, "u-vertex-module-u"]], "<u>Worker Module</u>": [[1, "u-worker-module-u"]], "Initial Setup": [[1, "initial-setup"]], "Upon starting this challenge, competitors will need to download the required matrials from the Off the Beaten Path challenge page.": [[1, "upon-starting-this-challenge-competitors-will-need-to-download-the-required-matrials-from-the-off-the-beaten-path-challenge-page"]], "The Xeek team will provide:": [[1, "the-xeek-team-will-provide"]], "An arguments file that will contain information to set up the problem. All participants will recieve the same arguments file. This file will contain information like total budget, site rewards, and duration of the simulation.": [[1, "an-arguments-file-that-will-contain-information-to-set-up-the-problem-all-participants-will-recieve-the-same-arguments-file-this-file-will-contain-information-like-total-budget-site-rewards-and-duration-of-the-simulation"]], "A graph JSON file. All participants will recieve the same graph.json file. This will be loaded into the lyra_graphtool.Graph object to set up the graph vertices and site information.": [[1, "a-graph-json-file-all-participants-will-recieve-the-same-graph-json-file-this-will-be-loaded-into-the-lyra-graphtool-graph-object-to-set-up-the-graph-vertices-and-site-information"]], "A starter notebook, similar to the example solution, but without the example solution. This notebook will be your playground to write an algorithm to solve the Off the Beaten Path Challenge!": [[1, "a-starter-notebook-similar-to-the-example-solution-but-without-the-example-solution-this-notebook-will-be-your-playground-to-write-an-algorithm-to-solve-the-off-the-beaten-path-challenge"]], "Note: Ensure that the lyra_graphtool folder is saved in your project folder to avoid import issues": [[1, "note-ensure-that-the-lyra-graphtool-folder-is-saved-in-your-project-folder-to-avoid-import-issues"]], "Now let\u2019s get started!": [[1, "now-let-s-get-started"]], "Run the next 3 code cells in order to setup graphs, budgets, worker costs, rewards, and duration. Double check to make sure the file paths for the lgtool.ProcessArgs.load() are correct.": [[1, "run-the-next-3-code-cells-in-order-to-setup-graphs-budgets-worker-costs-rewards-and-duration-double-check-to-make-sure-the-file-paths-for-the-lgtool-processargs-load-are-correct"]], "ProcessArgs Object": [[1, "processargs-object"]], "The ProcessArgs object will be used in the intial setup of the problem. Xeek will provide the setup parameters for the graph and arguments file for the challenge. Challengers do, however, have the tools to create their own argument files. Remember, the final scoring will occur on a different argument file than what is provided, so it is to your advantage to create your own argument file(s) and test your algorithm to see if it is effiecient for all scenarios. Below will explore the functionality of the ProceesArgs object, by building a test arguments/graph file.": [[1, "the-processargs-object-will-be-used-in-the-intial-setup-of-the-problem-xeek-will-provide-the-setup-parameters-for-the-graph-and-arguments-file-for-the-challenge-challengers-do-however-have-the-tools-to-create-their-own-argument-files-remember-the-final-scoring-will-occur-on-a-different-argument-file-than-what-is-provided-so-it-is-to-your-advantage-to-create-your-own-argument-file-s-and-test-your-algorithm-to-see-if-it-is-effiecient-for-all-scenarios-below-will-explore-the-functionality-of-the-proceesargs-object-by-building-a-test-arguments-graph-file"]], "Create a ProcessArgs object and pass the new argument file through it": [[1, "create-a-processargs-object-and-pass-the-new-argument-file-through-it"]], "ProcessArgs.save()": [[1, "processargs-save"]], "Save the new arguments file for future use": [[1, "save-the-new-arguments-file-for-future-use"]], "ProcessArgs.load()": [[1, "processargs-load"]], "Load the new argument and graph files into ProcessArgs() using load()": [[1, "load-the-new-argument-and-graph-files-into-processargs-using-load"]], "load_graph()": [[1, "load-graph"]], "Loading graph from filename into Site_Structures": [[1, "loading-graph-from-filename-into-site-structures"]], "ProcessArgs.values_to_args()": [[1, "processargs-values-to-args"]], "Finally, return the new arguments into a list and compare to what was created at the top, using values_to_args()": [[1, "finally-return-the-new-arguments-into-a-list-and-compare-to-what-was-created-at-the-top-using-values-to-args"]], "Parameters Object": [[1, "parameters-object"]], "The loaded arguments and graph can be wrapped with lgtool.Parameters class which can be further passed to the lgtool.Configuration() object.": [[1, "the-loaded-arguments-and-graph-can-be-wrapped-with-lgtool-parameters-class-which-can-be-further-passed-to-the-lgtool-configuration-object"]], "display()": [[1, "display"]], "Use the display() function to view the check the arguments that were passed through lgtool.Parameters": [[1, "use-the-display-function-to-view-the-check-the-arguments-that-were-passed-through-lgtool-parameters"]], "Or call each individual argument passed through lgtools.Parameters() object": [[1, "or-call-each-individual-argument-passed-through-lgtools-parameters-object"]], "Configuration Object": [[1, "configuration-object"]], "The lgtool.Configuration() object contains not only the graph to be optimized, but also problem constraints and setup like budget, duration, and worker cost rates. Pass the arguments run through the lgtool.Parameters() section for set up. This module will be the workhorse to solve the challenge because it allows users to add, update, and extract most parameters for the challenge.": [[1, "the-lgtool-configuration-object-contains-not-only-the-graph-to-be-optimized-but-also-problem-constraints-and-setup-like-budget-duration-and-worker-cost-rates-pass-the-arguments-run-through-the-lgtool-parameters-section-for-set-up-this-module-will-be-the-workhorse-to-solve-the-challenge-because-it-allows-users-to-add-update-and-extract-most-parameters-for-the-challenge"]], "add_sched()": [[1, "add-sched"]], "Add a specific schedule for a Worker_Type (wt) and number of those worker (wn). To access the configuration dictionary, call .config on the Configuration object created in the intial setup. Users can access this information using this format: Configuration.config[Worker_Type][worker number]": [[1, "add-a-specific-schedule-for-a-worker-type-wt-and-number-of-those-worker-wn-to-access-the-configuration-dictionary-call-config-on-the-configuration-object-created-in-the-intial-setup-users-can-access-this-information-using-this-format-configuration-config-worker-type-worker-number"]], "In the example below, .config is called on the Configuration object. We define that we want a Worker_Type = WORKER1 and we want 1 of those workers.": [[1, "in-the-example-below-config-is-called-on-the-configuration-object-we-define-that-we-want-a-worker-type-worker1-and-we-want-1-of-those-workers"]], "budget_feasible()": [[1, "budget-feasible"]], "Here we test whether the entire solution configuration stays within the budget contraints set in the arguments. This can be called on the Configuration object with no input arugments.": [[1, "here-we-test-whether-the-entire-solution-configuration-stays-within-the-budget-contraints-set-in-the-arguments-this-can-be-called-on-the-configuration-object-with-no-input-arugments"]], "cost()": [[1, "cost"]], "This will return the cost of the entire configuration. Remember, profit will be used to score the solution(profit = revenue - cost), so its important to not only increase revenue, but also be mindful of costs.  It can be called on the Configuration object with no input arguments.": [[1, "this-will-return-the-cost-of-the-entire-configuration-remember-profit-will-be-used-to-score-the-solution-profit-revenue-cost-so-its-important-to-not-only-increase-revenue-but-also-be-mindful-of-costs-it-can-be-called-on-the-configuration-object-with-no-input-arguments"]], "cost_sched()": [[1, "cost-sched"]], "Users can calculate the cost of a single-worker schedule by inputting.": [[1, "users-can-calculate-the-cost-of-a-single-worker-schedule-by-inputting"]], "feasible()": [[1, "feasible"]], "Method to determine overall feasibility of the configuration in terms of space, buget, and access": [[1, "method-to-determine-overall-feasibility-of-the-configuration-in-terms-of-space-buget-and-access"]], "get_accessed_sites()": [[1, "get-accessed-sites"]], "Method to return the sites that were accessed in a schedule": [[1, "method-to-return-the-sites-that-were-accessed-in-a-schedule"]], "get_current_workers()": [[1, "get-current-workers"]], "Method to return a dictionary of the the workers used in the configuration. This requires the full configuration schedule as an input.": [[1, "method-to-return-a-dictionary-of-the-the-workers-used-in-the-configuration-this-requires-the-full-configuration-schedule-as-an-input"]], "get_max_revenue()": [[1, "get-max-revenue"]], "Get the maximum revenue earned for a particular graph configuration": [[1, "get-the-maximum-revenue-earned-for-a-particular-graph-configuration"]], "get_sched_path_length()": [[1, "get-sched-path-length"]], "This is used to determine the length of one worker schedule (how many steps was the worker active). It requires a single schedule as an input": [[1, "this-is-used-to-determine-the-length-of-one-worker-schedule-how-many-steps-was-the-worker-active-it-requires-a-single-schedule-as-an-input"]], "get_vertices_start()": [[1, "get-vertices-start"]], "Returns the list vertices from which a worker\u2019s path must start": [[1, "returns-the-list-vertices-from-which-a-worker-s-path-must-start"]], "get_worker()": [[1, "get-worker"]], "Method to return a Worker object. The worker object has rates compliant with the configuration": [[1, "method-to-return-a-worker-object-the-worker-object-has-rates-compliant-with-the-configuration"]], "is_empty()": [[1, "is-empty"]], "Determine if a single worker schedule is empty": [[1, "determine-if-a-single-worker-schedule-is-empty"]], "load_from_json()": [[1, "load-from-json"], [1, "id1"]], "Loading the configuration from a .json ": [[1, "loading-the-configuration-from-a-json"]], "revenue()": [[1, "revenue"]], "This is a method to calculate the revenue for the entire schedule configuration": [[1, "this-is-a-method-to-calculate-the-revenue-for-the-entire-schedule-configuration"]], "save()": [[1, "save"]], "Save the configuration solution as a pickle file": [[1, "save-the-configuration-solution-as-a-pickle-file"]], "save_to_json()": [[1, "save-to-json"]], "Save the configuration solution as a .json file": [[1, "save-the-configuration-solution-as-a-json-file"]], "sched_all_feasible_access_sites()": [[1, "sched-all-feasible-access-sites"]], "This method determines if a schedules\u2019s access properties are feasible": [[1, "this-method-determines-if-a-schedules-s-access-properties-are-feasible"]], "sched_all_feasible_space()": [[1, "sched-all-feasible-space"]], "This is a method to determine if all schedules are spatially feasible": [[1, "this-is-a-method-to-determine-if-all-schedules-are-spatially-feasible"]], "sched_feasible_access_sites()": [[1, "sched-feasible-access-sites"]], "This method determines if a single schedule\u2019s access/extract properties are feasible. It requires the input of a single schedule and the Worker_Type class to test.": [[1, "this-method-determines-if-a-single-schedule-s-access-extract-properties-are-feasible-it-requires-the-input-of-a-single-schedule-and-the-worker-type-class-to-test"]], "sched_feasible_space()": [[1, "sched-feasible-space"]], "This tests whether the whole configuration is spatially feasible and requires an input of a single schedule.": [[1, "this-tests-whether-the-whole-configuration-is-spatially-feasible-and-requires-an-input-of-a-single-schedule"]], "sched_info()": [[1, "sched-info"]], "Prints information about specific workers schedule in the form: [timestep, (x_coordinate, y_coordinate), Vertex_Type, accessed/not accessed]": [[1, "prints-information-about-specific-workers-schedule-in-the-form-timestep-x-coordinate-y-coordinate-vertex-type-accessed-not-accessed"]], "sched_revenue()": [[1, "sched-revenue"]], "This method requires a single schedule as an input and returns the revenue of that particular schedule": [[1, "this-method-requires-a-single-schedule-as-an-input-and-returns-the-revenue-of-that-particular-schedule"]], "site_accessed()": [[1, "site-accessed"]], "This method determines whether or not the site was accessed in the configuration. It reuqired a Vertex object as an input.": [[1, "this-method-determines-whether-or-not-the-site-was-accessed-in-the-configuration-it-reuqired-a-vertex-object-as-an-input"]], "site_accessed_at_time()": [[1, "site-accessed-at-time"]], "This method requires a Vertex as an input and returns whether of not that site was accessed at a given time. This example uses timestep=5. You can see that this site was not accessed at timestep=5.": [[1, "this-method-requires-a-vertex-as-an-input-and-returns-whether-of-not-that-site-was-accessed-at-a-given-time-this-example-uses-timestep-5-you-can-see-that-this-site-was-not-accessed-at-timestep-5"]], "Edge Object": [[1, "edge-object"]], "Edge.info()": [[1, "edge-info"]], "Edge.info() returns the edge information about a given Edge object": [[1, "edge-info-returns-the-edge-information-about-a-given-edge-object"]], "in_graph()": [[1, "in-graph"]], "This method determines if the edge is allowed to travel in 1 timestep": [[1, "this-method-determines-if-the-edge-is-allowed-to-travel-in-1-timestep"]], "nearest_neighbor()": [[1, "nearest-neighbor"]], "This method requires an input of two vertices on the graph and determines if they are near each other.": [[1, "this-method-requires-an-input-of-two-vertices-on-the-graph-and-determines-if-they-are-near-each-other"]], "Graph Object": [[1, "graph-object"]], "add_vertex()": [[1, "add-vertex"]], "add_vertex() allows users to manually add a vertex to the graph configuration": [[1, "add-vertex-allows-users-to-manually-add-a-vertex-to-the-graph-configuration"]], "adjacent_vertices()": [[1, "adjacent-vertices"]], "This method returns which vertices are adjacent to a given vertex": [[1, "this-method-returns-which-vertices-are-adjacent-to-a-given-vertex"]], "closest_vertices()": [[1, "closest-vertices"]], "closest_vertices() returns a list the closet vertices to a given vertex": [[1, "closest-vertices-returns-a-list-the-closet-vertices-to-a-given-vertex"]], "connected_components()": [[1, "connected-components"]], "connected_components() returns a list of vertices that are connected": [[1, "connected-components-returns-a-list-of-vertices-that-are-connected"]], "depth_first_search()": [[1, "depth-first-search"]], "distance()": [[1, "distance"]], "get_edges_at_vertex()": [[1, "get-edges-at-vertex"]], "The get_edges_at_vertex() method will return a list of edges at a given vertex. Here we define our vertex using get_vertex_xy() with coordinates (x=2,y=3)": [[1, "the-get-edges-at-vertex-method-will-return-a-list-of-edges-at-a-given-vertex-here-we-define-our-vertex-using-get-vertex-xy-with-coordinates-x-2-y-3"]], "edges_info()": [[1, "edges-info"]], "This method will return the edges for the entire graph": [[1, "this-method-will-return-the-edges-for-the-entire-graph"]], "get_vertex_xy()": [[1, "get-vertex-xy"]], "This method returns the vertex object at given (x,y) coordinates": [[1, "this-method-returns-the-vertex-object-at-given-x-y-coordinates"]], "get_vertices_type()": [[1, "get-vertices-type"]], "We can use this method to extract vertices of a specific Vertex_Type": [[1, "we-can-use-this-method-to-extract-vertices-of-a-specific-vertex-type"]], "isolated_vertices()": [[1, "isolated-vertices"]], "Using isolated_vertices(), users can determine if any of the vertices in the graph are isolated from other vertices in the graph configuration.": [[1, "using-isolated-vertices-users-can-determine-if-any-of-the-vertices-in-the-graph-are-isolated-from-other-vertices-in-the-graph-configuration"]], "Load .json graph files into the Configuration object": [[1, "load-json-graph-files-into-the-configuration-object"]], "make_graph_connected()": [[1, "make-graph-connected"]], "paths()": [[1, "paths"]], "Another import method for the challenge is paths(), When provided with two vertices, this method will return ever possible path that can connect the two points.": [[1, "another-import-method-for-the-challenge-is-paths-when-provided-with-two-vertices-this-method-will-return-ever-possible-path-that-can-connect-the-two-points"]], "print_graph()": [[1, "print-graph"]], "The print_graph() method will be one of the most important used during the challenge, because it will allow you to visualize your the solution that your algorithm has created.": [[1, "the-print-graph-method-will-be-one-of-the-most-important-used-during-the-challenge-because-it-will-allow-you-to-visualize-your-the-solution-that-your-algorithm-has-created"]], "Graph.save()": [[1, "graph-save"]], "Save the graph to a pickle file for future use": [[1, "save-the-graph-to-a-pickle-file-for-future-use"]], "Graph.save_to_json()": [[1, "graph-save-to-json"]], "Save the new graph to a .json file for later use": [[1, "save-the-new-graph-to-a-json-file-for-later-use"]], "set_edges()": [[1, "set-edges"]], "unclear what this does?": [[1, "unclear-what-this-does"], [1, "id2"]], "set_random_sites_origin()": [[1, "set-random-sites-origin"]], "set_vertex_type()": [[1, "set-vertex-type"]], "We can use the set_vertex_type() method to manually set a particular Vertex object, by defining the Vertex_Type and (x,y) coordinates": [[1, "we-can-use-the-set-vertex-type-method-to-manually-set-a-particular-vertex-object-by-defining-the-vertex-type-and-x-y-coordinates"]], "set_vertex_coords()": [[1, "set-vertex-coords"]], "Similar to set_vertex_type(), set_vertex_coords() will set a defined Vertex_Type to specificed (x,y) coordinates": [[1, "similar-to-set-vertex-type-set-vertex-coords-will-set-a-defined-vertex-type-to-specificed-x-y-coordinates"]], "vertices_array()": [[1, "vertices-array"]], "We can use the vertices_array() method to extract a Numpy array of vertices in the graph": [[1, "we-can-use-the-vertices-array-method-to-extract-a-numpy-array-of-vertices-in-the-graph"]], "vertices_info()": [[1, "vertices-info"]], "By calling .vertices_info() the user can either define a list of vertices to recieve info about. Here we will use the get_vertices_type() method to extract a list of SITE3 Vertex_Types and use the list to get vertices information.": [[1, "by-calling-vertices-info-the-user-can-either-define-a-list-of-vertices-to-recieve-info-about-here-we-will-use-the-get-vertices-type-method-to-extract-a-list-of-site3-vertex-types-and-use-the-list-to-get-vertices-information"]], "We can also provide no vertices list and recieve all vertices in the graph": [[1, "we-can-also-provide-no-vertices-list-and-recieve-all-vertices-in-the-graph"]], "Vertex_Type Object": [[1, "vertex-type-object"]], "Vertex_Type is used to store and define each location type on the graph. These variables will contain spatial location information, as well as reward amount and time to extract. SITEs 1,2 and 3 can contain varying reward amounts.": [[1, "vertex-type-is-used-to-store-and-define-each-location-type-on-the-graph-these-variables-will-contain-spatial-location-information-as-well-as-reward-amount-and-time-to-extract-sites-1-2-and-3-can-contain-varying-reward-amounts"]], "Vertex_Type.BASIC - BASIC is a location in space, neither a SITE nor the ORIGIN (regular point on the graph)": [[1, "vertex-type-basic-basic-is-a-location-in-space-neither-a-site-nor-the-origin-regular-point-on-the-graph"]], "Vertex_Type.ORIGIN - starting point for workers": [[1, "vertex-type-origin-starting-point-for-workers"]], "Vertex_Type.OTHER": [[1, "vertex-type-other"]], "Vertex_Type.OTHER2": [[1, "vertex-type-other2"]], "Vertex_Type.SITE1 - point on graph with reward": [[1, "vertex-type-site1-point-on-graph-with-reward"]], "Vertex_Type.SITE2 - point on graph with reward": [[1, "vertex-type-site2-point-on-graph-with-reward"], [1, "id3"]], "Vertex Object": [[1, "vertex-object"]], "The Vertex object allows users to create vertices for that graph by defining characteristics such as coordinates (x,y), Vertex_Type, rewards available at given site, site expiration time, and time to aquire. Below we create a vertex object and assign attributes.": [[1, "the-vertex-object-allows-users-to-create-vertices-for-that-graph-by-defining-characteristics-such-as-coordinates-x-y-vertex-type-rewards-available-at-given-site-site-expiration-time-and-time-to-aquire-below-we-create-a-vertex-object-and-assign-attributes"]], "Vertex.info()": [[1, "vertex-info"]], "Using .info() we can view the Vertex object we just created, along with it\u2019s defining characteristics": [[1, "using-info-we-can-view-the-vertex-object-we-just-created-along-with-it-s-defining-characteristics"]], "accessible_types()": [[1, "accessible-types"]], "We can also use .accessible_types() to determine which Vertex_Types are accessible": [[1, "we-can-also-use-accessible-types-to-determine-which-vertex-types-are-accessible"]], "Worker_Type Object": [[1, "worker-type-object"]], "Worker_Type holds the variable information the three types of workers: WORKER1, WORKER2, and WORKER3. Each worker is assigned an order, and this can be viewed by calling .worker_types on the configuration ocject created in the initial setup.": [[1, "worker-type-holds-the-variable-information-the-three-types-of-workers-worker1-worker2-and-worker3-each-worker-is-assigned-an-order-and-this-can-be-viewed-by-calling-worker-types-on-the-configuration-ocject-created-in-the-initial-setup"]], "In the Configuration-Object section above you can see how to get the cost rate assigned to each worker for the configuration.": [[1, "in-the-configuration-object-section-above-you-can-see-how-to-get-the-cost-rate-assigned-to-each-worker-for-the-configuration"]], "Worker Object": [[1, "worker-object"]], "The Worker object contains the information about worker type and associated cost rate.": [[1, "the-worker-object-contains-the-information-about-worker-type-and-associated-cost-rate"]], "Welcome to Lyra Graphtool\u2019s documentation!": [[2, "welcome-to-lyra-graphtool-s-documentation"]], "Indices and tables": [[2, "indices-and-tables"]], "Installation": [[3, "installation"]], "lyra_graphtool": [[4, "lyra-graphtool"]], "lyra_graphtool.configuration module": [[4, "module-lyra_graphtool.configuration"]], "lyra_graphtool.edge module": [[4, "module-lyra_graphtool.edge"]], "lyra_graphtool.graph module": [[4, "module-lyra_graphtool.graph"]], "lyra_graphtool.parameters module": [[4, "module-lyra_graphtool.parameters"]], "lyra_graphtool.utils module": [[4, "module-lyra_graphtool.utils"]], "lyra_graphtool.vertex module": [[4, "module-lyra_graphtool.vertex"]], "lyra_graphtool.worker module": [[4, "module-lyra_graphtool.worker"]], "API Documentation": [[5, "api-documentation"]], "Tutorial": [[6, "tutorial"]]}, "indexentries": {"basic (lyra_graphtool.vertex.vertex_type attribute)": [[4, "lyra_graphtool.vertex.Vertex_Type.BASIC"]], "config_single_time (class in lyra_graphtool.configuration)": [[4, "lyra_graphtool.configuration.Config_Single_Time"]], "configuration (class in lyra_graphtool.configuration)": [[4, "lyra_graphtool.configuration.Configuration"]], "edge (class in lyra_graphtool.edge)": [[4, "lyra_graphtool.edge.Edge"]], "grid (lyra_graphtool.graph.graph_type attribute)": [[4, "lyra_graphtool.graph.Graph_Type.GRID"]], "graph (class in lyra_graphtool.graph)": [[4, "lyra_graphtool.graph.Graph"]], "graph_type (class in lyra_graphtool.graph)": [[4, "lyra_graphtool.graph.Graph_Type"]], "origin (lyra_graphtool.vertex.vertex_type attribute)": [[4, "lyra_graphtool.vertex.Vertex_Type.ORIGIN"]], "other (lyra_graphtool.vertex.vertex_type attribute)": [[4, "lyra_graphtool.vertex.Vertex_Type.OTHER"]], "other2 (lyra_graphtool.vertex.vertex_type attribute)": [[4, "lyra_graphtool.vertex.Vertex_Type.OTHER2"]], "parameters (class in lyra_graphtool.parameters)": [[4, "lyra_graphtool.parameters.Parameters"]], "processargs (class in lyra_graphtool.parameters)": [[4, "lyra_graphtool.parameters.ProcessArgs"]], "random (lyra_graphtool.graph.graph_type attribute)": [[4, "lyra_graphtool.graph.Graph_Type.RANDOM"]], "site1 (lyra_graphtool.vertex.vertex_type attribute)": [[4, "lyra_graphtool.vertex.Vertex_Type.SITE1"]], "site2 (lyra_graphtool.vertex.vertex_type attribute)": [[4, "lyra_graphtool.vertex.Vertex_Type.SITE2"]], "site3 (lyra_graphtool.vertex.vertex_type attribute)": [[4, "lyra_graphtool.vertex.Vertex_Type.SITE3"]], "site_structures (class in lyra_graphtool.parameters)": [[4, "lyra_graphtool.parameters.Site_Structures"]], "vertex (class in lyra_graphtool.vertex)": [[4, "lyra_graphtool.vertex.Vertex"]], "vertex_type (class in lyra_graphtool.vertex)": [[4, "lyra_graphtool.vertex.Vertex_Type"]], "worker1 (lyra_graphtool.worker.worker_type attribute)": [[4, "lyra_graphtool.worker.Worker_Type.WORKER1"]], "worker2 (lyra_graphtool.worker.worker_type attribute)": [[4, "lyra_graphtool.worker.Worker_Type.WORKER2"]], "worker3 (lyra_graphtool.worker.worker_type attribute)": [[4, "lyra_graphtool.worker.Worker_Type.WORKER3"]], "worker (class in lyra_graphtool.worker)": [[4, "lyra_graphtool.worker.Worker"]], "worker_type (class in lyra_graphtool.worker)": [[4, "lyra_graphtool.worker.Worker_Type"]], "access() (lyra_graphtool.worker.worker method)": [[4, "lyra_graphtool.worker.Worker.access"]], "accessible_types() (lyra_graphtool.vertex.vertex static method)": [[4, "lyra_graphtool.vertex.Vertex.accessible_types"]], "add_sched() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.add_sched"]], "add_vertex() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.add_vertex"]], "adjacent_vertices() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.adjacent_vertices"]], "bostr() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.bostr"]], "budget_feasible() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.budget_feasible"]], "checkd3() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.checkd3"]], "checkf() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.checkf"]], "checki() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.checki"]], "checkp2() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.checkp2"]], "closest_vertices() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.closest_vertices"]], "comma_separated_float_3() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.comma_separated_float_3"]], "comma_separated_int_2() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.comma_separated_int_2"]], "connected_components() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.connected_components"]], "cost() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.cost"]], "cost_sched() (lyra_graphtool.configuration.configuration static method)": [[4, "lyra_graphtool.configuration.Configuration.cost_sched"]], "depth_first_search() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.depth_first_search"]], "display() (lyra_graphtool.parameters.parameters method)": [[4, "lyra_graphtool.parameters.Parameters.display"]], "distance() (lyra_graphtool.graph.graph static method)": [[4, "lyra_graphtool.graph.Graph.distance"]], "edges_info() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.edges_info"]], "feasible() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.feasible"]], "get_accessed_sites() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.get_accessed_sites"]], "get_current_workers() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.get_current_workers"]], "get_edges_at_vertex() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.get_edges_at_vertex"]], "get_max_revenue() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.get_max_revenue"]], "get_sched_path_length() (lyra_graphtool.configuration.configuration static method)": [[4, "lyra_graphtool.configuration.Configuration.get_sched_path_length"]], "get_vertex_xy() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.get_vertex_xy"]], "get_vertices_start() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.get_vertices_start"]], "get_vertices_type() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.get_vertices_type"]], "get_worker() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.get_worker"]], "grstr() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.grstr"]], "in_graph() (lyra_graphtool.edge.edge method)": [[4, "lyra_graphtool.edge.Edge.in_graph"]], "info() (lyra_graphtool.configuration.config_single_time method)": [[4, "lyra_graphtool.configuration.Config_Single_Time.info"]], "info() (lyra_graphtool.edge.edge method)": [[4, "lyra_graphtool.edge.Edge.info"]], "info() (lyra_graphtool.vertex.vertex method)": [[4, "lyra_graphtool.vertex.Vertex.info"]], "is_empty() (lyra_graphtool.configuration.configuration static method)": [[4, "lyra_graphtool.configuration.Configuration.is_empty"]], "isolated_vertices() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.isolated_vertices"]], "load() (lyra_graphtool.parameters.processargs class method)": [[4, "lyra_graphtool.parameters.ProcessArgs.load"]], "load_from_json() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.load_from_json"]], "load_from_json() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.load_from_json"]], "load_graph() (lyra_graphtool.parameters.processargs method)": [[4, "lyra_graphtool.parameters.ProcessArgs.load_graph"]], "lyra_graphtool.configuration": [[4, "module-lyra_graphtool.configuration"]], "lyra_graphtool.edge": [[4, "module-lyra_graphtool.edge"]], "lyra_graphtool.graph": [[4, "module-lyra_graphtool.graph"]], "lyra_graphtool.parameters": [[4, "module-lyra_graphtool.parameters"]], "lyra_graphtool.utils": [[4, "module-lyra_graphtool.utils"]], "lyra_graphtool.vertex": [[4, "module-lyra_graphtool.vertex"]], "lyra_graphtool.worker": [[4, "module-lyra_graphtool.worker"]], "make_graph_connected() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.make_graph_connected"]], "module": [[4, "module-lyra_graphtool.configuration"], [4, "module-lyra_graphtool.edge"], [4, "module-lyra_graphtool.graph"], [4, "module-lyra_graphtool.parameters"], [4, "module-lyra_graphtool.utils"], [4, "module-lyra_graphtool.vertex"], [4, "module-lyra_graphtool.worker"]], "nearest_neighbor() (lyra_graphtool.edge.edge method)": [[4, "lyra_graphtool.edge.Edge.nearest_neighbor"]], "nnfloat() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.nnfloat"]], "nnint() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.nnint"]], "ostr() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.ostr"]], "paths() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.paths"]], "pint() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.pint"]], "print_graph() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.print_graph"]], "remove_vertex() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.remove_vertex"]], "revenue() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.revenue"]], "save() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.save"]], "save() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.save"]], "save() (lyra_graphtool.parameters.processargs method)": [[4, "lyra_graphtool.parameters.ProcessArgs.save"]], "save_to_json() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.save_to_json"]], "save_to_json() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.save_to_json"]], "sched_all_feasible_access_sites() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.sched_all_feasible_access_sites"]], "sched_all_feasible_space() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.sched_all_feasible_space"]], "sched_feasible_access_sites() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.sched_feasible_access_sites"]], "sched_feasible_space() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.sched_feasible_space"]], "sched_info() (lyra_graphtool.configuration.configuration static method)": [[4, "lyra_graphtool.configuration.Configuration.sched_info"]], "sched_revenue() (lyra_graphtool.configuration.configuration static method)": [[4, "lyra_graphtool.configuration.Configuration.sched_revenue"]], "set_edges() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.set_edges"]], "set_random_sites_origin() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.set_random_sites_origin"]], "set_vertex_coords() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.set_vertex_coords"]], "set_vertex_type() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.set_vertex_type"]], "site_accessed() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.site_accessed"]], "site_accessed_at_time() (lyra_graphtool.configuration.configuration method)": [[4, "lyra_graphtool.configuration.Configuration.site_accessed_at_time"]], "sstr() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.sstr"]], "values_to_args() (lyra_graphtool.parameters.processargs method)": [[4, "lyra_graphtool.parameters.ProcessArgs.values_to_args"]], "values_to_args() (lyra_graphtool.parameters.site_structures method)": [[4, "lyra_graphtool.parameters.Site_Structures.values_to_args"]], "vertices_array() (in module lyra_graphtool.utils)": [[4, "lyra_graphtool.utils.vertices_array"]], "vertices_array() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.vertices_array"]], "vertices_info() (lyra_graphtool.graph.graph method)": [[4, "lyra_graphtool.graph.Graph.vertices_info"]]}})